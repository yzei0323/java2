내부클래스 :  클래스안에 선언되는 클래스 

-멤버인스턴스 내부클래스
-정적 내부 클래스 
-매서드 안에 정의된 클래스 ( 지역내부클래스라고 부른다)
-익명 클래스 

####################################
- 보다 강력한 캡슐화
- 외부/내부 클래스간의 관계가 긴밀할 때 사용
- 적절히 사용시 유지보수가 용이하고 가독성을 높여줌
 
   

public class Outer {
    private String inst = "인스턴스";
    private static String sttc = "클래스";

    //    멤버 인스턴스 클래스  =>인스턴스 필드 사용과 비슷
    class InnerInstMember {    
        //  내부클래스에서 외부 클래스의 멤버 접근 가능함  
        //  ⭐️ 외부 클래스의 필드와 클래스 접근 가능
        private String name = inst + " 필드로서의 클래스";
        private InnerSttcMember innerSttcMember = new InnerSttcMember();
        public void func () {
            System.out.println(name);
        }
    }

    //  정적(클래스) 내부 클래스   =>클래스 필드 사용과 비슷     
    public static class InnerSttcMember {
        //  ⭐️ 외부 클래스의 클래스 필드만 접근 가능
        private String name = sttc + " 필드로서의 클래스";

        //     static이 아닌 멤버 인스턴스 클래스에도 접근 불가!
        //  private InnerInstMember innerInstMember = new InnerInstMember();

        public void func () {
            //  인스턴스 메소드지만 클래스가 정적(클래스의)이므로 인스턴스 필드 접근 불가
            //  name += inst;
            System.out.println(name);
        }
    }

    public void memberFunc () {   // 지역내부 클래스   : 특정매서드에서 클래스를 정의하고 사용할 수 있다.
    
        //    메소드 안에 정의된 클래스
        //    스코프가 메소드 내로 제한됨
        class MethodMember {
            //  외부의 필드와 클래스에 접근은 가능
            String instSttc = inst + " " + sttc;
            InnerInstMember innerInstMember = new InnerInstMember();
            InnerSttcMember innerSttcMember = new InnerSttcMember();

            public void func () {
                innerInstMember.func();
                innerSttcMember.func();
                System.out.println("메소드 안의 클래스");                
            }
        }

        new MethodMember().func();
    }

    public void innerFuncs () {
        new InnerInstMember().func();
        new InnerSttcMember().func();
    }

    public InnerInstMember getInnerInstMember () {
        return new InnerInstMember();
    }
}