자바2일차 

학습목표 : 
 1. 함수형인터페이스를 3가지 방법으로 구현하고 실행할 수 있다.
 2. 함수형인터페이스를 람다식으로 표현할 수 있다.
 3. 람다식이 함수형인터페이스를 구현한 익명객체의 익명매서드임을 인지할 수 있다.
 4. 두 개의 실습과제를 완성할 수 있다.

######################
## 람다식##############
-함수형프로그램
- 매서드(함수)를 간단한 식으로 표현하는 방법
     => 매서드이름, 반환타입 생략가능함 
     => 매개변수 인자 타입정보 생략가능함 
     => return 문의 식이 한 줄 일때     return 생략가능함 


- 익명함수로 구현함 그러나 실제로는 익명객체의 매서드이다
- 자바는 함수(매서드가) 단독으로 존재할 수 없다
- 인터페이스에 구현해야할 매서드 정보를 한 개만 가지게 한다.
 ( Functioal Interface라고  부른다 ) 

######################

복습실습1  :  다음의 문제를 푸시오
Collections.sort (    List list  ,  Comparator c ) 를 사용하여 파워순으로 정렬하시오 <오름차순>
Moving클래스 만들기   캐릭터이름, 암호명, 파워값 저장할 수 있는 Moving클래스 작성하기

class Moving{
     String name;
     String alias ;
     int power;
}
 
 Comparator 구현시
 1.  인터페이스를 구현한 클래스 이용하기
 2 . 익명클래스를 작성하여 사용하기 
 
Moving("장주원", "구룡포" , 100);
Moving( "이미현"  , "경기" , 80)
Moving("김두식"  ," 문산" , 90);
Moving("전영석", "봉평" , 88); 
 
 
!! forEach사용하기 (오늘 같이)

ArrayList<String>에  무빙의 등장인물을 저장한 뒤 forEach를 이용해서 출력하기
장주원  
이미현 
김두식
전계도
프랭크
김봉석
장희수
이강훈
  
  1) 인터페이스를 구현한 클래스를 만들고 사용하기
  2) 익명클래스를 작성하여 사용하기

 

##########################
Lamda - 함수형인터페이스     ( 매서드를 간단한 식으로 표현한것)
#########################
구현할 매서드가 하나 뿐인 인터페이스를 함수형인터페이스라고 한다
오직 함수형인터페이스만이 람다식으로 표현할 수 있다


매서드를 람다식으로 변환해 보기 (직접해보기)
 1)
int max( int a, int b){
  return a>b ? a:b ;
}

 ==>

2)
void printVar( String name, int age) {
   System.out.println( name + "=" +  age);
}

 ==>

3) int squre( int x) {
        return x*x;
   }
   ==>

4) int getRandom(){
      return  ( int) (Math.random() * 6) ;
 }

  ==>


/*
 * 오전실습과제
 * 1. 함수형인터페이스 만들기 ,예시)   AddInterface  
 * 2. 함수형인터페이스 구현  ,  클래스이름, 익명클래스, 람다식
 * 
 */

#########################################################
##람다식을 사용하고 싶다면 함수형인터페이스가 필요하다
그래서 매번 만들어 쓰는것이 아니라  자바에서 함수형인터페이스를 제공한다
#########################################################

자바에서 제공되는 표준함수형 인터페이스  알아보자! 
 함수형 인터페이스 란?  : 추상매서드(구현해야 할 매서드)가 하나뿐인 인터페이스   

Runnable            :  void run () 
/*
 실습2
  Runnable 인터페이스를 3가지 방식으로 구현하고  제출하기
  실행될 내용은 각자 원하는 내용이 출력될 수 있도록 하기
  몇 개의 작성예제 같이 보기
*/

Consumer<T>       :  void  accept(  T t) 
Supplier<T>         :   T get( )
Predicate<T>        :  Boolean test ( T t)
Function<T,R>       :  R apply ( T t)
 

##############################
오후 실습과제
############################## 
Runnable
Consumer<T>
Supplier<T>
Predicate<T>
Function<T,R>

1. Runnable  :      버킷리스트 출력하기 
2. Consumer  :     3만원으로 장보기  
3. Supplier  :       요리만들기   (레시피 정보 출력하고  반환값은  요리명을 반환해 주세요 !)

4. Predicate  :      입력으로 받은 요리가 내가만든요리인 경우 true, false반환하기

5. Function  :       입력하나 반환있는 함수 만들기  ( 2개 이상만 작성하기)

                       - 입력으로 들어오는 수의 제곱  반환하기
                       - 입력으로 들어오는 수의 범위안의 난수 반환하기
                       - 입력으로 들어오는 금액에 대한 화폐매수 구하기

 #####################################################
 


